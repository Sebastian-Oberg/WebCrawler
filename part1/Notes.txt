1. WSAStartup()
2. Socket initialization via socket()
3. DNS conversion via inet_addr()
4. DNS lookup via gethostbyname()
5. Connection
	- If the URL passes basic checks (i.e., correct scheme, non-zero port number), you should attempt to obtain the page via HTTP 1.0.
6. Here is where you make a GET request, send, rcv() loop, and parse
	- If you manage to connect and receive a valid reply (HTTP 2xx), parse the HTML result and display the required information about your download
	- Otherwise, the program should legibly report the type of error encountered and terminate gracefully, even if the remote host is hanging or not responding
	- Note that your code must be able to handle pages of arbitrary length by dynamically expanding the buffer provided to recv()
7. Cleanup
*Note: place steps 2-7 within the Socket object to make part 3 easier
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Supported Format
	scheme://host[:port][/path][?query][#fragment]

Strip off the fragment and extract the port number from the host
	- If the path is not present, must use root “/” in its place

How to do:
1) Find # using strchr() and truncate
2) Find ? , extract query, truncate
3) Find / , extract path, truncate
4) Find :, extract port, truncate, obtain host
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Must accept a single command - line argument with a target URL
	- If the argument is missing or there are too many of them, print usage information and quit
--------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML Parsing Notes:
One-tab indentation after the first line, an asterisk for the connection phase, a plus for the parsing phase, and timing of each networking step are required
	- If you manage to receive the page, but the status code is not 2xx, skip the HTML parser, but print everything else
	- If you are unable to download the page, stop at the last attempted step and display the failure condition
		- For network errors, provide the corresponding WSAGetLastError() result



    

    // Step 3: Socket Initialization and Connection
    winsock_test();

    // Create socket
    Socket mySocket;
    mySocket.openSocket(); // Error handling is included in method


    /*
         Step 4: DNS (Clock this!)
            Perform DNS lookup - translates human readable domain names (for example, www.amazon.com) to machine readable IP
            Handle cases where the DNS lookup fails
            - 1. Connect but not valid reply
            - 2. Cannot connect
    */

    mySocket.dns(host, portPos); // Calls connect

    // Step 5: HTTP Request Construction
 
    // Construct the HTTP request
    char request[2048];
    sprintf_s(request, "GET %s%s HTTP/1.0\r\nHost: %s\r\n\r\n", path, (query != nullptr) ? query : "", host);

    // Step 6: Sending and Receiving Data

    // Send the request
    if (!mySocket.Send(request, static_cast<int>(strlen(request))))
    {
        printf("Failed to send request.\n");
        return 1;
    }

    // Receive and process data in a loop
    if (!mySocket.Read())
    {
        printf("Failed to receive response.\n");
        return 1;
    }

    //Step 7: Parsing HTTP Response
    bool fullHTMLParse = false;
    int statusCode = mySocket.getStatusCode(); // Extract status code

    // Status code is null
    if (statusCode < 0)
    {
        printf("ERROR: Buffer is equal to NULL\n");
        return -1;
    }

    // Status code is invalid
    if (statusCode < 100 || statusCode > 599)
    {
        printf("ERROR: Invalid status code %i\n", statusCode);
        return -1;
    }

    // Positive Status Codes
    printf("\tVerifying header... status code %i\n", statusCode);

    // Range where we want to parse
    if ((statusCode >= 200) && (statusCode < 300))
    {
        fullHTMLParse = true;
    }

    // Step 8: Displaying Results

    // Range where we want to skip the HTML parser, but print everything else
    if (mySocket.validConnection && fullHTMLParse)
    {
        // Call html parser
        char* position = strstr(mySocket.buf, "\r\n\r\n");
        mySocket.parse(position, mySocket.curPos - atoi(position + 4), originalURL, strlen(originalURL));

        printf("----------------------------------------\n");

        // Print truncated html
        char* truncated = truncate(mySocket.buf, '<');
        printf(truncated);
    }

    else if (mySocket.validConnection && !fullHTMLParse)
    {
        printf("----------------------------------------\n");
        char* truncated = truncate(mySocket.buf, '<');
        printf(truncated);
    }

    else
    {
        printf("\tConnection Error: %d\n", WSAGetLastError());
        printf("----------------------------------------\n");
    }

    // Step 10: Cleanup and Finalization
    mySocket.Close();
    mySocket.End();

    return 0;